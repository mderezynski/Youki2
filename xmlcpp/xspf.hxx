// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSPF_HXX
#define XSPF_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/tree/parsing.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type<type> simple_type;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef integer non_positive_integer;
  typedef integer non_negative_integer;
  typedef integer positive_integer;
  typedef integer negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken> nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::day< char, simple_type > day;
  typedef ::xsd::cxx::tree::month< char, simple_type > month;
  typedef ::xsd::cxx::tree::month_day< char, simple_type > month_day;
  typedef ::xsd::cxx::tree::year< char, simple_type > year;
  typedef ::xsd::cxx::tree::year_month< char, simple_type > year_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // DOM user data key for back pointers to tree nodes.
  //
#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA

  const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;

#endif

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;
}

// Forward declarations.
//
namespace xspf
{
  class playlist;
  class trackList;
  class attribution;
  class link;
  class meta;
  class extension;
  class track;
  class version;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace xspf
{
  class playlist: public ::xml_schema::type
  {
    public:
    // title
    // 
    typedef ::xml_schema::string title_type;
    typedef ::xsd::cxx::tree::sequence< title_type > title_sequence;
    typedef title_sequence::iterator title_iterator;
    typedef title_sequence::const_iterator title_const_iterator;
    typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

    const title_sequence&
    title () const;

    title_sequence&
    title ();

    void
    title (const title_sequence& s);

    // creator
    // 
    typedef ::xml_schema::string creator_type;
    typedef ::xsd::cxx::tree::sequence< creator_type > creator_sequence;
    typedef creator_sequence::iterator creator_iterator;
    typedef creator_sequence::const_iterator creator_const_iterator;
    typedef ::xsd::cxx::tree::traits< creator_type, char > creator_traits;

    const creator_sequence&
    creator () const;

    creator_sequence&
    creator ();

    void
    creator (const creator_sequence& s);

    // annotation
    // 
    typedef ::xml_schema::string annotation_type;
    typedef ::xsd::cxx::tree::sequence< annotation_type > annotation_sequence;
    typedef annotation_sequence::iterator annotation_iterator;
    typedef annotation_sequence::const_iterator annotation_const_iterator;
    typedef ::xsd::cxx::tree::traits< annotation_type, char > annotation_traits;

    const annotation_sequence&
    annotation () const;

    annotation_sequence&
    annotation ();

    void
    annotation (const annotation_sequence& s);

    // info
    // 
    typedef ::xml_schema::uri info_type;
    typedef ::xsd::cxx::tree::sequence< info_type > info_sequence;
    typedef info_sequence::iterator info_iterator;
    typedef info_sequence::const_iterator info_const_iterator;
    typedef ::xsd::cxx::tree::traits< info_type, char > info_traits;

    const info_sequence&
    info () const;

    info_sequence&
    info ();

    void
    info (const info_sequence& s);

    // location
    // 
    typedef ::xml_schema::uri location_type;
    typedef ::xsd::cxx::tree::sequence< location_type > location_sequence;
    typedef location_sequence::iterator location_iterator;
    typedef location_sequence::const_iterator location_const_iterator;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_sequence&
    location () const;

    location_sequence&
    location ();

    void
    location (const location_sequence& s);

    // identifier
    // 
    typedef ::xml_schema::uri identifier_type;
    typedef ::xsd::cxx::tree::sequence< identifier_type > identifier_sequence;
    typedef identifier_sequence::iterator identifier_iterator;
    typedef identifier_sequence::const_iterator identifier_const_iterator;
    typedef ::xsd::cxx::tree::traits< identifier_type, char > identifier_traits;

    const identifier_sequence&
    identifier () const;

    identifier_sequence&
    identifier ();

    void
    identifier (const identifier_sequence& s);

    // image
    // 
    typedef ::xml_schema::uri image_type;
    typedef ::xsd::cxx::tree::sequence< image_type > image_sequence;
    typedef image_sequence::iterator image_iterator;
    typedef image_sequence::const_iterator image_const_iterator;
    typedef ::xsd::cxx::tree::traits< image_type, char > image_traits;

    const image_sequence&
    image () const;

    image_sequence&
    image ();

    void
    image (const image_sequence& s);

    // date
    // 
    typedef ::xml_schema::date_time date_type;
    typedef ::xsd::cxx::tree::sequence< date_type > date_sequence;
    typedef date_sequence::iterator date_iterator;
    typedef date_sequence::const_iterator date_const_iterator;
    typedef ::xsd::cxx::tree::traits< date_type, char > date_traits;

    const date_sequence&
    date () const;

    date_sequence&
    date ();

    void
    date (const date_sequence& s);

    // license
    // 
    typedef ::xml_schema::uri license_type;
    typedef ::xsd::cxx::tree::sequence< license_type > license_sequence;
    typedef license_sequence::iterator license_iterator;
    typedef license_sequence::const_iterator license_const_iterator;
    typedef ::xsd::cxx::tree::traits< license_type, char > license_traits;

    const license_sequence&
    license () const;

    license_sequence&
    license ();

    void
    license (const license_sequence& s);

    // attribution
    // 
    typedef ::xspf::attribution attribution_type;
    typedef ::xsd::cxx::tree::sequence< attribution_type > attribution_sequence;
    typedef attribution_sequence::iterator attribution_iterator;
    typedef attribution_sequence::const_iterator attribution_const_iterator;
    typedef ::xsd::cxx::tree::traits< attribution_type, char > attribution_traits;

    const attribution_sequence&
    attribution () const;

    attribution_sequence&
    attribution ();

    void
    attribution (const attribution_sequence& s);

    // link
    // 
    typedef ::xspf::link link_type;
    typedef ::xsd::cxx::tree::sequence< link_type > link_sequence;
    typedef link_sequence::iterator link_iterator;
    typedef link_sequence::const_iterator link_const_iterator;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_sequence&
    link () const;

    link_sequence&
    link ();

    void
    link (const link_sequence& s);

    // meta
    // 
    typedef ::xspf::meta meta_type;
    typedef ::xsd::cxx::tree::sequence< meta_type > meta_sequence;
    typedef meta_sequence::iterator meta_iterator;
    typedef meta_sequence::const_iterator meta_const_iterator;
    typedef ::xsd::cxx::tree::traits< meta_type, char > meta_traits;

    const meta_sequence&
    meta () const;

    meta_sequence&
    meta ();

    void
    meta (const meta_sequence& s);

    // extension
    // 
    typedef ::xspf::extension extension_type;
    typedef ::xsd::cxx::tree::sequence< extension_type > extension_sequence;
    typedef extension_sequence::iterator extension_iterator;
    typedef extension_sequence::const_iterator extension_const_iterator;
    typedef ::xsd::cxx::tree::traits< extension_type, char > extension_traits;

    const extension_sequence&
    extension () const;

    extension_sequence&
    extension ();

    void
    extension (const extension_sequence& s);

    // trackList
    // 
    typedef ::xspf::trackList trackList_type;
    typedef ::xsd::cxx::tree::sequence< trackList_type > trackList_sequence;
    typedef trackList_sequence::iterator trackList_iterator;
    typedef trackList_sequence::const_iterator trackList_const_iterator;
    typedef ::xsd::cxx::tree::traits< trackList_type, char > trackList_traits;

    const trackList_sequence&
    trackList () const;

    trackList_sequence&
    trackList ();

    void
    trackList (const trackList_sequence& s);

    // version
    // 
    typedef ::xspf::version version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    version_type&
    version ();

    void
    version (const version_type& x);

    void
    version (::std::auto_ptr< version_type > p);

    // Constructors.
    //
    playlist (const version_type&);

    playlist (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

    playlist (const playlist& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

    virtual playlist*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:
    title_sequence title_;
    creator_sequence creator_;
    annotation_sequence annotation_;
    info_sequence info_;
    location_sequence location_;
    identifier_sequence identifier_;
    image_sequence image_;
    date_sequence date_;
    license_sequence license_;
    attribution_sequence attribution_;
    link_sequence link_;
    meta_sequence meta_;
    extension_sequence extension_;
    trackList_sequence trackList_;
    ::xsd::cxx::tree::one< version_type > version_;
  };

  class trackList: public ::xml_schema::type
  {
    public:
    // track
    // 
    typedef ::xspf::track track_type;
    typedef ::xsd::cxx::tree::sequence< track_type > track_sequence;
    typedef track_sequence::iterator track_iterator;
    typedef track_sequence::const_iterator track_const_iterator;
    typedef ::xsd::cxx::tree::traits< track_type, char > track_traits;

    const track_sequence&
    track () const;

    track_sequence&
    track ();

    void
    track (const track_sequence& s);

    // Constructors.
    //
    trackList ();

    trackList (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

    trackList (const trackList& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

    virtual trackList*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:
    track_sequence track_;
  };

  class attribution: public ::xml_schema::type
  {
    public:
    // identifier
    // 
    typedef ::xml_schema::uri identifier_type;
    typedef ::xsd::cxx::tree::sequence< identifier_type > identifier_sequence;
    typedef identifier_sequence::iterator identifier_iterator;
    typedef identifier_sequence::const_iterator identifier_const_iterator;
    typedef ::xsd::cxx::tree::traits< identifier_type, char > identifier_traits;

    const identifier_sequence&
    identifier () const;

    identifier_sequence&
    identifier ();

    void
    identifier (const identifier_sequence& s);

    // location
    // 
    typedef ::xml_schema::uri location_type;
    typedef ::xsd::cxx::tree::sequence< location_type > location_sequence;
    typedef location_sequence::iterator location_iterator;
    typedef location_sequence::const_iterator location_const_iterator;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_sequence&
    location () const;

    location_sequence&
    location ();

    void
    location (const location_sequence& s);

    // Constructors.
    //
    attribution ();

    attribution (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::type* c = 0);

    attribution (const attribution& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::type* c = 0);

    virtual attribution*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:
    identifier_sequence identifier_;
    location_sequence location_;
  };

  class link: public ::xml_schema::uri
  {
    public:
    // rel
    // 
    typedef ::xml_schema::uri rel_type;
    typedef ::xsd::cxx::tree::traits< rel_type, char > rel_traits;

    const rel_type&
    rel () const;

    rel_type&
    rel ();

    void
    rel (const rel_type& x);

    void
    rel (::std::auto_ptr< rel_type > p);

    // Constructors.
    //
    link (const ::xml_schema::uri&,
          const rel_type&);

    link (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0);

    link (const link& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0);

    virtual link*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:
    ::xsd::cxx::tree::one< rel_type > rel_;
  };

  class meta: public ::xml_schema::type
  {
    public:
    // rel
    // 
    typedef ::xml_schema::uri rel_type;
    typedef ::xsd::cxx::tree::traits< rel_type, char > rel_traits;

    const rel_type&
    rel () const;

    rel_type&
    rel ();

    void
    rel (const rel_type& x);

    void
    rel (::std::auto_ptr< rel_type > p);

    // Constructors.
    //
    meta (const rel_type&);

    meta (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0);

    meta (const meta& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0);

    virtual meta*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:
    ::xsd::cxx::tree::one< rel_type > rel_;
  };

  class extension: public ::xml_schema::type
  {
    public:
    // application
    // 
    typedef ::xml_schema::uri application_type;
    typedef ::xsd::cxx::tree::traits< application_type, char > application_traits;

    const application_type&
    application () const;

    application_type&
    application ();

    void
    application (const application_type& x);

    void
    application (::std::auto_ptr< application_type > p);

    // Constructors.
    //
    extension (const application_type&);

    extension (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

    extension (const extension& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

    virtual extension*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:
    ::xsd::cxx::tree::one< application_type > application_;
  };

  class track: public ::xml_schema::type
  {
    public:
    // location
    // 
    typedef ::xml_schema::uri location_type;
    typedef ::xsd::cxx::tree::sequence< location_type > location_sequence;
    typedef location_sequence::iterator location_iterator;
    typedef location_sequence::const_iterator location_const_iterator;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_sequence&
    location () const;

    location_sequence&
    location ();

    void
    location (const location_sequence& s);

    // identifier
    // 
    typedef ::xml_schema::uri identifier_type;
    typedef ::xsd::cxx::tree::sequence< identifier_type > identifier_sequence;
    typedef identifier_sequence::iterator identifier_iterator;
    typedef identifier_sequence::const_iterator identifier_const_iterator;
    typedef ::xsd::cxx::tree::traits< identifier_type, char > identifier_traits;

    const identifier_sequence&
    identifier () const;

    identifier_sequence&
    identifier ();

    void
    identifier (const identifier_sequence& s);

    // title
    // 
    typedef ::xml_schema::string title_type;
    typedef ::xsd::cxx::tree::sequence< title_type > title_sequence;
    typedef title_sequence::iterator title_iterator;
    typedef title_sequence::const_iterator title_const_iterator;
    typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

    const title_sequence&
    title () const;

    title_sequence&
    title ();

    void
    title (const title_sequence& s);

    // creator
    // 
    typedef ::xml_schema::string creator_type;
    typedef ::xsd::cxx::tree::sequence< creator_type > creator_sequence;
    typedef creator_sequence::iterator creator_iterator;
    typedef creator_sequence::const_iterator creator_const_iterator;
    typedef ::xsd::cxx::tree::traits< creator_type, char > creator_traits;

    const creator_sequence&
    creator () const;

    creator_sequence&
    creator ();

    void
    creator (const creator_sequence& s);

    // annotation
    // 
    typedef ::xml_schema::string annotation_type;
    typedef ::xsd::cxx::tree::sequence< annotation_type > annotation_sequence;
    typedef annotation_sequence::iterator annotation_iterator;
    typedef annotation_sequence::const_iterator annotation_const_iterator;
    typedef ::xsd::cxx::tree::traits< annotation_type, char > annotation_traits;

    const annotation_sequence&
    annotation () const;

    annotation_sequence&
    annotation ();

    void
    annotation (const annotation_sequence& s);

    // info
    // 
    typedef ::xml_schema::uri info_type;
    typedef ::xsd::cxx::tree::sequence< info_type > info_sequence;
    typedef info_sequence::iterator info_iterator;
    typedef info_sequence::const_iterator info_const_iterator;
    typedef ::xsd::cxx::tree::traits< info_type, char > info_traits;

    const info_sequence&
    info () const;

    info_sequence&
    info ();

    void
    info (const info_sequence& s);

    // image
    // 
    typedef ::xml_schema::uri image_type;
    typedef ::xsd::cxx::tree::sequence< image_type > image_sequence;
    typedef image_sequence::iterator image_iterator;
    typedef image_sequence::const_iterator image_const_iterator;
    typedef ::xsd::cxx::tree::traits< image_type, char > image_traits;

    const image_sequence&
    image () const;

    image_sequence&
    image ();

    void
    image (const image_sequence& s);

    // album
    // 
    typedef ::xml_schema::string album_type;
    typedef ::xsd::cxx::tree::sequence< album_type > album_sequence;
    typedef album_sequence::iterator album_iterator;
    typedef album_sequence::const_iterator album_const_iterator;
    typedef ::xsd::cxx::tree::traits< album_type, char > album_traits;

    const album_sequence&
    album () const;

    album_sequence&
    album ();

    void
    album (const album_sequence& s);

    // trackNum
    // 
    typedef ::xml_schema::non_negative_integer trackNum_type;
    typedef ::xsd::cxx::tree::sequence< trackNum_type > trackNum_sequence;
    typedef trackNum_sequence::iterator trackNum_iterator;
    typedef trackNum_sequence::const_iterator trackNum_const_iterator;
    typedef ::xsd::cxx::tree::traits< trackNum_type, char > trackNum_traits;

    const trackNum_sequence&
    trackNum () const;

    trackNum_sequence&
    trackNum ();

    void
    trackNum (const trackNum_sequence& s);

    // duration
    // 
    typedef ::xml_schema::non_negative_integer duration_type;
    typedef ::xsd::cxx::tree::sequence< duration_type > duration_sequence;
    typedef duration_sequence::iterator duration_iterator;
    typedef duration_sequence::const_iterator duration_const_iterator;
    typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

    const duration_sequence&
    duration () const;

    duration_sequence&
    duration ();

    void
    duration (const duration_sequence& s);

    // link
    // 
    typedef ::xspf::link link_type;
    typedef ::xsd::cxx::tree::sequence< link_type > link_sequence;
    typedef link_sequence::iterator link_iterator;
    typedef link_sequence::const_iterator link_const_iterator;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_sequence&
    link () const;

    link_sequence&
    link ();

    void
    link (const link_sequence& s);

    // meta
    // 
    typedef ::xspf::meta meta_type;
    typedef ::xsd::cxx::tree::sequence< meta_type > meta_sequence;
    typedef meta_sequence::iterator meta_iterator;
    typedef meta_sequence::const_iterator meta_const_iterator;
    typedef ::xsd::cxx::tree::traits< meta_type, char > meta_traits;

    const meta_sequence&
    meta () const;

    meta_sequence&
    meta ();

    void
    meta (const meta_sequence& s);

    // extension
    // 
    typedef ::xspf::extension extension_type;
    typedef ::xsd::cxx::tree::sequence< extension_type > extension_sequence;
    typedef extension_sequence::iterator extension_iterator;
    typedef extension_sequence::const_iterator extension_const_iterator;
    typedef ::xsd::cxx::tree::traits< extension_type, char > extension_traits;

    const extension_sequence&
    extension () const;

    extension_sequence&
    extension ();

    void
    extension (const extension_sequence& s);

    // Constructors.
    //
    track ();

    track (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::type* c = 0);

    track (const track& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::type* c = 0);

    virtual track*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:
    location_sequence location_;
    identifier_sequence identifier_;
    title_sequence title_;
    creator_sequence creator_;
    annotation_sequence annotation_;
    info_sequence info_;
    image_sequence image_;
    album_sequence album_;
    trackNum_sequence trackNum_;
    duration_sequence duration_;
    link_sequence link_;
    meta_sequence meta_;
    extension_sequence extension_;
  };

  class version: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    version ();

    version (const ::xml_schema::string&);

    version (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

    version (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

    version (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

    version (const version& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

    virtual version*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;
  };
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xspf
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (const ::xercesc::DOMInputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (const ::xercesc::DOMInputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (const ::xercesc::DOMInputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::playlist >
  playlist_ (::xercesc::DOMDocument* d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  title (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  title (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  title (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  title (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  title (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  title (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  title (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  title (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  title (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  title (const ::xercesc::DOMInputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  title (const ::xercesc::DOMInputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  title (const ::xercesc::DOMInputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  title (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  title (::xercesc::DOMDocument* d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  creator (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  creator (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  creator (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  creator (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  creator (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  creator (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  creator (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  creator (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  creator (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  creator (const ::xercesc::DOMInputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  creator (const ::xercesc::DOMInputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  creator (const ::xercesc::DOMInputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  creator (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  creator (::xercesc::DOMDocument* d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  annotation (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  annotation (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  annotation (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  annotation (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  annotation (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  annotation (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  annotation (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  annotation (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  annotation (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  annotation (const ::xercesc::DOMInputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  annotation (const ::xercesc::DOMInputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  annotation (const ::xercesc::DOMInputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  annotation (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  annotation (::xercesc::DOMDocument* d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  info (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  info (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  info (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  info (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  info (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  info (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  info (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  info (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  info (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  info (const ::xercesc::DOMInputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  info (const ::xercesc::DOMInputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  info (const ::xercesc::DOMInputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  info (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  info (::xercesc::DOMDocument* d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  location (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  location (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  location (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  location (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  location (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  location (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  location (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  location (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  location (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  location (const ::xercesc::DOMInputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  location (const ::xercesc::DOMInputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  location (const ::xercesc::DOMInputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  location (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  location (::xercesc::DOMDocument* d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (const ::xercesc::DOMInputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (const ::xercesc::DOMInputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (const ::xercesc::DOMInputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  identifier (::xercesc::DOMDocument* d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  image (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  image (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  image (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  image (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  image (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  image (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  image (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  image (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  image (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  image (const ::xercesc::DOMInputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  image (const ::xercesc::DOMInputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  image (const ::xercesc::DOMInputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  image (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  image (::xercesc::DOMDocument* d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  date (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  date (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  date (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  date (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  date (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  date (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  date (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  date (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  date (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  date (const ::xercesc::DOMInputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  date (const ::xercesc::DOMInputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  date (const ::xercesc::DOMInputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  date (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  date (::xercesc::DOMDocument* d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  license (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  license (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  license (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  license (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  license (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  license (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  license (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  license (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  license (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  license (const ::xercesc::DOMInputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  license (const ::xercesc::DOMInputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  license (const ::xercesc::DOMInputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  license (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  license (::xercesc::DOMDocument* d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (const ::xercesc::DOMInputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (const ::xercesc::DOMInputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (const ::xercesc::DOMInputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::trackList >
  trackList_ (::xercesc::DOMDocument* d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (const ::xercesc::DOMInputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (const ::xercesc::DOMInputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (const ::xercesc::DOMInputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::attribution >
  attribution_ (::xercesc::DOMDocument* d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xspf::link >
  link_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::link >
  link_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::link >
  link_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xspf::link >
  link_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::link >
  link_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::link >
  link_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::link >
  link_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::link >
  link_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::link >
  link_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xspf::link >
  link_ (const ::xercesc::DOMInputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::link >
  link_ (const ::xercesc::DOMInputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::link >
  link_ (const ::xercesc::DOMInputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xspf::link >
  link_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::link >
  link_ (::xercesc::DOMDocument* d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xspf::meta >
  meta_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::meta >
  meta_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::meta >
  meta_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xspf::meta >
  meta_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::meta >
  meta_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::meta >
  meta_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::meta >
  meta_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::meta >
  meta_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::meta >
  meta_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xspf::meta >
  meta_ (const ::xercesc::DOMInputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::meta >
  meta_ (const ::xercesc::DOMInputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::meta >
  meta_ (const ::xercesc::DOMInputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xspf::meta >
  meta_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::meta >
  meta_ (::xercesc::DOMDocument* d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xspf::extension >
  extension_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::extension >
  extension_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::extension >
  extension_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xspf::extension >
  extension_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::extension >
  extension_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::extension >
  extension_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::extension >
  extension_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::extension >
  extension_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::extension >
  extension_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xspf::extension >
  extension_ (const ::xercesc::DOMInputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::extension >
  extension_ (const ::xercesc::DOMInputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::extension >
  extension_ (const ::xercesc::DOMInputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xspf::extension >
  extension_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::extension >
  extension_ (::xercesc::DOMDocument* d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xspf::track >
  track_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::track >
  track_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::track >
  track_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xspf::track >
  track_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::track >
  track_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::track >
  track_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::track >
  track_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::track >
  track_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::track >
  track_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xspf::track >
  track_ (const ::xercesc::DOMInputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::track >
  track_ (const ::xercesc::DOMInputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::track >
  track_ (const ::xercesc::DOMInputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xspf::track >
  track_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xspf::track >
  track_ (::xercesc::DOMDocument* d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  album (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  album (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  album (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  album (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  album (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  album (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  album (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  album (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  album (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  album (const ::xercesc::DOMInputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  album (const ::xercesc::DOMInputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  album (const ::xercesc::DOMInputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  album (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  album (::xercesc::DOMDocument* d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (const ::xercesc::DOMInputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (const ::xercesc::DOMInputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (const ::xercesc::DOMInputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  trackNum (::xercesc::DOMDocument* d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (const ::xercesc::DOMInputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (const ::xercesc::DOMInputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (const ::xercesc::DOMInputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::non_negative_integer >
  duration (::xercesc::DOMDocument* d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XSPF_HXX
