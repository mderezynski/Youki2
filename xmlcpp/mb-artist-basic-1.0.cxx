// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "mb-artist-basic-1.0.hxx"

namespace mmd
{
  // metadata
  // 

  const metadata::artist_type& metadata::
  artist () const
  {
    return this->artist_.get ();
  }

  metadata::artist_type& metadata::
  artist ()
  {
    return this->artist_.get ();
  }

  void metadata::
  artist (const artist_type& artist)
  {
    this->artist_.set (artist);
  }

  void metadata::
  artist (::std::auto_ptr< artist_type > artist)
  {
    this->artist_.set (artist);
  }


  // artist
  // 

  const artist::name_type& artist::
  name () const
  {
    return this->name_.get ();
  }

  artist::name_type& artist::
  name ()
  {
    return this->name_.get ();
  }

  void artist::
  name (const name_type& name)
  {
    this->name_.set (name);
  }

  void artist::
  name (::std::auto_ptr< name_type > name)
  {
    this->name_.set (name);
  }

  const artist::sort_name_type& artist::
  sort_name () const
  {
    return this->sort_name_.get ();
  }

  artist::sort_name_type& artist::
  sort_name ()
  {
    return this->sort_name_.get ();
  }

  void artist::
  sort_name (const sort_name_type& sort_name)
  {
    this->sort_name_.set (sort_name);
  }

  void artist::
  sort_name (::std::auto_ptr< sort_name_type > sort_name)
  {
    this->sort_name_.set (sort_name);
  }

  const artist::life_span_optional& artist::
  life_span () const
  {
    return this->life_span_;
  }

  artist::life_span_optional& artist::
  life_span ()
  {
    return this->life_span_;
  }

  void artist::
  life_span (const life_span_type& life_span)
  {
    this->life_span_.set (life_span);
  }

  void artist::
  life_span (const life_span_optional& life_span)
  {
    this->life_span_ = life_span;
  }

  void artist::
  life_span (::std::auto_ptr< life_span_type > life_span)
  {
    this->life_span_.set (life_span);
  }

  const artist::id_type& artist::
  id () const
  {
    return this->id_.get ();
  }

  artist::id_type& artist::
  id ()
  {
    return this->id_.get ();
  }

  void artist::
  id (const id_type& id)
  {
    this->id_.set (id);
  }

  void artist::
  id (::std::auto_ptr< id_type > id)
  {
    this->id_.set (id);
  }

  const artist::type_type& artist::
  type () const
  {
    return this->type_.get ();
  }

  artist::type_type& artist::
  type ()
  {
    return this->type_.get ();
  }

  void artist::
  type (const type_type& type)
  {
    this->type_.set (type);
  }

  void artist::
  type (::std::auto_ptr< type_type > type)
  {
    this->type_.set (type);
  }


  // life_span
  // 

  const life_span::begin_optional& life_span::
  begin () const
  {
    return this->begin_;
  }

  life_span::begin_optional& life_span::
  begin ()
  {
    return this->begin_;
  }

  void life_span::
  begin (const begin_type& begin)
  {
    this->begin_.set (begin);
  }

  void life_span::
  begin (const begin_optional& begin)
  {
    this->begin_ = begin;
  }

  void life_span::
  begin (::std::auto_ptr< begin_type > begin)
  {
    this->begin_.set (begin);
  }

  const life_span::end_optional& life_span::
  end () const
  {
    return this->end_;
  }

  life_span::end_optional& life_span::
  end ()
  {
    return this->end_;
  }

  void life_span::
  end (const end_type& end)
  {
    this->end_.set (end);
  }

  void life_span::
  end (const end_optional& end)
  {
    this->end_ = end;
  }

  void life_span::
  end (::std::auto_ptr< end_type > end)
  {
    this->end_.set (end);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace mmd
{
  // metadata
  //

  metadata::
  metadata (const artist_type& artist)
  : ::xml_schema::type (),
    artist_ (artist, ::xml_schema::flags (), this)
  {
  }

  metadata::
  metadata (const metadata& x,
            ::xml_schema::flags f,
            ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    artist_ (x.artist_, f, this)
  {
  }

  metadata::
  metadata (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    artist_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void metadata::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // artist
      //
      if (n.name () == "artist" && n.namespace_ () == "http://musicbrainz.org/ns/mmd-1.0#")
      {
        ::std::auto_ptr< artist_type > r (
          artist_traits::create (i, f, this));

        if (!artist_.present ())
        {
          this->artist (r);
          continue;
        }
      }

      break;
    }

    if (!artist_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "artist",
        "http://musicbrainz.org/ns/mmd-1.0#");
    }
  }

  metadata* metadata::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new metadata (*this, f, c);
  }

  // artist
  //

  artist::
  artist (const name_type& name,
          const sort_name_type& sort_name,
          const id_type& id,
          const type_type& type)
  : ::xml_schema::type (),
    name_ (name, ::xml_schema::flags (), this),
    sort_name_ (sort_name, ::xml_schema::flags (), this),
    life_span_ (::xml_schema::flags (), this),
    id_ (id, ::xml_schema::flags (), this),
    type_ (type, ::xml_schema::flags (), this)
  {
  }

  artist::
  artist (const artist& x,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    name_ (x.name_, f, this),
    sort_name_ (x.sort_name_, f, this),
    life_span_ (x.life_span_, f, this),
    id_ (x.id_, f, this),
    type_ (x.type_, f, this)
  {
  }

  artist::
  artist (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    name_ (f, this),
    sort_name_ (f, this),
    life_span_ (f, this),
    id_ (f, this),
    type_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void artist::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ () == "http://musicbrainz.org/ns/mmd-1.0#")
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!name_.present ())
        {
          this->name (r);
          continue;
        }
      }

      // sort_name
      //
      if (n.name () == "sort-name" && n.namespace_ () == "http://musicbrainz.org/ns/mmd-1.0#")
      {
        ::std::auto_ptr< sort_name_type > r (
          sort_name_traits::create (i, f, this));

        if (!sort_name_.present ())
        {
          this->sort_name (r);
          continue;
        }
      }

      // life_span
      //
      if (n.name () == "life-span" && n.namespace_ () == "http://musicbrainz.org/ns/mmd-1.0#")
      {
        ::std::auto_ptr< life_span_type > r (
          life_span_traits::create (i, f, this));

        if (!this->life_span ())
        {
          this->life_span (r);
          continue;
        }
      }

      break;
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "http://musicbrainz.org/ns/mmd-1.0#");
    }

    if (!sort_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "sort-name",
        "http://musicbrainz.org/ns/mmd-1.0#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        this->id (r);
        continue;
      }

      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type (r);
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "type",
        "");
    }
  }

  artist* artist::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new artist (*this, f, c);
  }

  // life_span
  //

  life_span::
  life_span ()
  : ::xml_schema::type (),
    begin_ (::xml_schema::flags (), this),
    end_ (::xml_schema::flags (), this)
  {
  }

  life_span::
  life_span (const life_span& x,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    begin_ (x.begin_, f, this),
    end_ (x.end_, f, this)
  {
  }

  life_span::
  life_span (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    begin_ (f, this),
    end_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void life_span::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "begin" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< begin_type > r (
          begin_traits::create (i, f, this));

        this->begin (r);
        continue;
      }

      if (n.name () == "end" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< end_type > r (
          end_traits::create (i, f, this));

        this->end (r);
        continue;
      }
    }
  }

  life_span* life_span::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new life_span (*this, f, c);
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mmd
{
  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::mmd::metadata > r (
      ::mmd::metadata_ (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::mmd::metadata > r (
      ::mmd::metadata_ (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::mmd::metadata > r (
      ::mmd::metadata_ (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::mmd::metadata_ (wrap, f, p);
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::mmd::metadata_ (wrap, h, f, p);
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::mmd::metadata_ (wrap, h, f, p);
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::mmd::metadata_ (wrap, f, p);
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::mmd::metadata_ (wrap, h, f, p);
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::mmd::metadata_ (wrap, h, f, p);
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::mmd::metadata > r (
      ::mmd::metadata_ (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (const ::xercesc::DOMInputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::mmd::metadata > r (
      ::mmd::metadata_ (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::mmd::metadata > r (
      ::mmd::metadata_ (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::mmd::metadata > r (
        ::mmd::metadata_ (
          c.get (), f | ::xml_schema::flags::own_dom, p));

      c.release ();
      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "metadata" &&
        n.namespace_ () == "http://musicbrainz.org/ns/mmd-1.0#")
    {
      ::std::auto_ptr< ::mmd::metadata > r (
        ::xsd::cxx::tree::traits< ::mmd::metadata, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "metadata",
      "http://musicbrainz.org/ns/mmd-1.0#");
  }

  ::std::auto_ptr< ::mmd::metadata >
  metadata_ (::xercesc::DOMDocument* d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    const ::xercesc::DOMElement& e (
      c.get ()
      ? *c->getDocumentElement ()
      : *d->getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "metadata" &&
        n.namespace_ () == "http://musicbrainz.org/ns/mmd-1.0#")
    {
      ::std::auto_ptr< ::mmd::metadata > r (
        ::xsd::cxx::tree::traits< ::mmd::metadata, char >::create (
          e, f, 0));
      c.release ();
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "metadata",
      "http://musicbrainz.org/ns/mmd-1.0#");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

