// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "xsd-artist-toptracks-2.0.hxx"

// lfm
// 

const lfm::toptracks_type& lfm::
toptracks () const
{
  return this->toptracks_.get ();
}

lfm::toptracks_type& lfm::
toptracks ()
{
  return this->toptracks_.get ();
}

void lfm::
toptracks (const toptracks_type& toptracks)
{
  this->toptracks_.set (toptracks);
}

void lfm::
toptracks (::std::auto_ptr< toptracks_type > toptracks)
{
  this->toptracks_.set (toptracks);
}


// toptracks
// 

const toptracks::track_sequence& toptracks::
track () const
{
  return this->track_;
}

toptracks::track_sequence& toptracks::
track ()
{
  return this->track_;
}

void toptracks::
track (const track_sequence& track)
{
  this->track_ = track;
}


// track
// 

const track::name_type& track::
name () const
{
  return this->name_.get ();
}

track::name_type& track::
name ()
{
  return this->name_.get ();
}

void track::
name (const name_type& name)
{
  this->name_.set (name);
}

void track::
name (::std::auto_ptr< name_type > name)
{
  this->name_.set (name);
}

const track::playcount_type& track::
playcount () const
{
  return this->playcount_.get ();
}

track::playcount_type& track::
playcount ()
{
  return this->playcount_.get ();
}

void track::
playcount (const playcount_type& playcount)
{
  this->playcount_.set (playcount);
}

const track::mbid_type& track::
mbid () const
{
  return this->mbid_.get ();
}

track::mbid_type& track::
mbid ()
{
  return this->mbid_.get ();
}

void track::
mbid (const mbid_type& mbid)
{
  this->mbid_.set (mbid);
}

void track::
mbid (::std::auto_ptr< mbid_type > mbid)
{
  this->mbid_.set (mbid);
}

const track::rank_type& track::
rank () const
{
  return this->rank_.get ();
}

track::rank_type& track::
rank ()
{
  return this->rank_.get ();
}

void track::
rank (const rank_type& rank)
{
  this->rank_.set (rank);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// lfm
//

lfm::
lfm (const toptracks_type& toptracks)
: ::xml_schema::type (),
  toptracks_ (toptracks, ::xml_schema::flags (), this)
{
}

lfm::
lfm (const lfm& x,
     ::xml_schema::flags f,
     ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  toptracks_ (x.toptracks_, f, this)
{
}

lfm::
lfm (const ::xercesc::DOMElement& e,
     ::xml_schema::flags f,
     ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  toptracks_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void lfm::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // toptracks
    //
    if (n.name () == "toptracks" && n.namespace_ () == "")
    {
      ::std::auto_ptr< toptracks_type > r (
        toptracks_traits::create (i, f, this));

      if (!toptracks_.present ())
      {
        this->toptracks (r);
        continue;
      }
    }

    break;
  }

  if (!toptracks_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "toptracks",
      "");
  }
}

lfm* lfm::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new lfm (*this, f, c);
}

// toptracks
//

toptracks::
toptracks ()
: ::xml_schema::type (),
  track_ (::xml_schema::flags (), this)
{
}

toptracks::
toptracks (const toptracks& x,
           ::xml_schema::flags f,
           ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  track_ (x.track_, f, this)
{
}

toptracks::
toptracks (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  track_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void toptracks::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // track
    //
    if (n.name () == "track" && n.namespace_ () == "")
    {
      ::std::auto_ptr< track_type > r (
        track_traits::create (i, f, this));

      this->track ().push_back (r);
      continue;
    }

    break;
  }
}

toptracks* toptracks::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new toptracks (*this, f, c);
}

// track
//

track::
track (const name_type& name,
       const playcount_type& playcount,
       const mbid_type& mbid,
       const rank_type& rank)
: ::xml_schema::type (),
  name_ (name, ::xml_schema::flags (), this),
  playcount_ (playcount, ::xml_schema::flags (), this),
  mbid_ (mbid, ::xml_schema::flags (), this),
  rank_ (rank, ::xml_schema::flags (), this)
{
}

track::
track (const track& x,
       ::xml_schema::flags f,
       ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  playcount_ (x.playcount_, f, this),
  mbid_ (x.mbid_, f, this),
  rank_ (x.rank_, f, this)
{
}

track::
track (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (f, this),
  playcount_ (f, this),
  mbid_ (f, this),
  rank_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void track::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // name
    //
    if (n.name () == "name" && n.namespace_ () == "")
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      if (!name_.present ())
      {
        this->name (r);
        continue;
      }
    }

    // playcount
    //
    if (n.name () == "playcount" && n.namespace_ () == "")
    {
      if (!playcount_.present ())
      {
        this->playcount (playcount_traits::create (i, f, this));
        continue;
      }
    }

    // mbid
    //
    if (n.name () == "mbid" && n.namespace_ () == "")
    {
      ::std::auto_ptr< mbid_type > r (
        mbid_traits::create (i, f, this));

      if (!mbid_.present ())
      {
        this->mbid (r);
        continue;
      }
    }

    break;
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "name",
      "");
  }

  if (!playcount_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "playcount",
      "");
  }

  if (!mbid_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mbid",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "rank" && n.namespace_ ().empty ())
    {
      this->rank (rank_traits::create (i, f, this));
      continue;
    }
  }

  if (!rank_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "rank",
      "");
  }
}

track* track::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new track (*this, f, c);
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::lfm >
lfm_ (const ::std::string& u,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::lfm > r (
    ::lfm_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::lfm >
lfm_ (const ::std::string& u,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::lfm > r (
    ::lfm_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::lfm >
lfm_ (const ::std::string& u,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::lfm > r (
    ::lfm_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::lfm >
lfm_ (::std::istream& is,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::lfm_ (wrap, f, p);
}

::std::auto_ptr< ::lfm >
lfm_ (::std::istream& is,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::lfm_ (wrap, h, f, p);
}

::std::auto_ptr< ::lfm >
lfm_ (::std::istream& is,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::lfm_ (wrap, h, f, p);
}

::std::auto_ptr< ::lfm >
lfm_ (::std::istream& is,
      const ::std::string& sid,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::lfm_ (wrap, f, p);
}

::std::auto_ptr< ::lfm >
lfm_ (::std::istream& is,
      const ::std::string& sid,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::lfm_ (wrap, h, f, p);
}

::std::auto_ptr< ::lfm >
lfm_ (::std::istream& is,
      const ::std::string& sid,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::lfm_ (wrap, h, f, p);
}

::std::auto_ptr< ::lfm >
lfm_ (const ::xercesc::DOMInputSource& i,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::lfm > r (
    ::lfm_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::lfm >
lfm_ (const ::xercesc::DOMInputSource& i,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::lfm > r (
    ::lfm_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::lfm >
lfm_ (const ::xercesc::DOMInputSource& i,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::lfm > r (
    ::lfm_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::lfm >
lfm_ (const ::xercesc::DOMDocument& d,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::lfm > r (
      ::lfm_ (
        c.get (), f | ::xml_schema::flags::own_dom, p));

    c.release ();
    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "lfm" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::lfm > r (
      ::xsd::cxx::tree::traits< ::lfm, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "lfm",
    "");
}

::std::auto_ptr< ::lfm >
lfm_ (::xercesc::DOMDocument* d,
      ::xml_schema::flags f,
      const ::xml_schema::properties&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  const ::xercesc::DOMElement& e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d->getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "lfm" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::lfm > r (
      ::xsd::cxx::tree::traits< ::lfm, char >::create (
        e, f, 0));
    c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "lfm",
    "");
}

::std::auto_ptr< ::toptracks >
toptracks_ (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::toptracks > r (
    ::toptracks_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::toptracks >
toptracks_ (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::toptracks > r (
    ::toptracks_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::toptracks >
toptracks_ (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::toptracks > r (
    ::toptracks_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::toptracks >
toptracks_ (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::toptracks_ (wrap, f, p);
}

::std::auto_ptr< ::toptracks >
toptracks_ (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::toptracks_ (wrap, h, f, p);
}

::std::auto_ptr< ::toptracks >
toptracks_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::toptracks_ (wrap, h, f, p);
}

::std::auto_ptr< ::toptracks >
toptracks_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::toptracks_ (wrap, f, p);
}

::std::auto_ptr< ::toptracks >
toptracks_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::toptracks_ (wrap, h, f, p);
}

::std::auto_ptr< ::toptracks >
toptracks_ (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::toptracks_ (wrap, h, f, p);
}

::std::auto_ptr< ::toptracks >
toptracks_ (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::toptracks > r (
    ::toptracks_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::toptracks >
toptracks_ (const ::xercesc::DOMInputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::toptracks > r (
    ::toptracks_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::toptracks >
toptracks_ (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::toptracks > r (
    ::toptracks_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::toptracks >
toptracks_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::toptracks > r (
      ::toptracks_ (
        c.get (), f | ::xml_schema::flags::own_dom, p));

    c.release ();
    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "toptracks" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::toptracks > r (
      ::xsd::cxx::tree::traits< ::toptracks, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "toptracks",
    "");
}

::std::auto_ptr< ::toptracks >
toptracks_ (::xercesc::DOMDocument* d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  const ::xercesc::DOMElement& e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d->getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "toptracks" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::toptracks > r (
      ::xsd::cxx::tree::traits< ::toptracks, char >::create (
        e, f, 0));
    c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "toptracks",
    "");
}

::std::auto_ptr< ::track >
track_ (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::track > r (
    ::track_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::track >
track_ (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::track > r (
    ::track_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::track >
track_ (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::track > r (
    ::track_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::track >
track_ (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::track_ (wrap, f, p);
}

::std::auto_ptr< ::track >
track_ (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::track_ (wrap, h, f, p);
}

::std::auto_ptr< ::track >
track_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::track_ (wrap, h, f, p);
}

::std::auto_ptr< ::track >
track_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::track_ (wrap, f, p);
}

::std::auto_ptr< ::track >
track_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::track_ (wrap, h, f, p);
}

::std::auto_ptr< ::track >
track_ (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::track_ (wrap, h, f, p);
}

::std::auto_ptr< ::track >
track_ (const ::xercesc::DOMInputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::track > r (
    ::track_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::track >
track_ (const ::xercesc::DOMInputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::track > r (
    ::track_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::track >
track_ (const ::xercesc::DOMInputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::track > r (
    ::track_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::track >
track_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::track > r (
      ::track_ (
        c.get (), f | ::xml_schema::flags::own_dom, p));

    c.release ();
    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "track" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::track > r (
      ::xsd::cxx::tree::traits< ::track, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "track",
    "");
}

::std::auto_ptr< ::track >
track_ (::xercesc::DOMDocument* d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  const ::xercesc::DOMElement& e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d->getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "track" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::track > r (
      ::xsd::cxx::tree::traits< ::track, char >::create (
        e, f, 0));
    c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "track",
    "");
}

::std::auto_ptr< ::xml_schema::integer >
playcount (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::xml_schema::integer > r (
    ::playcount (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::integer >
playcount (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::xml_schema::integer > r (
    ::playcount (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::integer >
playcount (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::xml_schema::integer > r (
    ::playcount (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::integer >
playcount (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::playcount (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::integer >
playcount (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::playcount (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::integer >
playcount (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::playcount (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::integer >
playcount (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::playcount (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::integer >
playcount (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::playcount (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::integer >
playcount (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::playcount (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::integer >
playcount (const ::xercesc::DOMInputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::xml_schema::integer > r (
    ::playcount (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::integer >
playcount (const ::xercesc::DOMInputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::xml_schema::integer > r (
    ::playcount (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::integer >
playcount (const ::xercesc::DOMInputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::xml_schema::integer > r (
    ::playcount (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::integer >
playcount (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::xml_schema::integer > r (
      ::playcount (
        c.get (), f | ::xml_schema::flags::own_dom, p));

    c.release ();
    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "playcount" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::integer > r (
      new ::xml_schema::integer (
        ::xsd::cxx::tree::traits< ::xml_schema::integer, char >::create (
          e, f, 0)));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "playcount",
    "");
}

::std::auto_ptr< ::xml_schema::integer >
playcount (::xercesc::DOMDocument* d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  const ::xercesc::DOMElement& e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d->getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "playcount" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::integer > r (
      new ::xml_schema::integer (
        ::xsd::cxx::tree::traits< ::xml_schema::integer, char >::create (
          e, f, 0)));
    c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "playcount",
    "");
}

::std::auto_ptr< ::xml_schema::string >
name (const ::std::string& u,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::xml_schema::string > r (
    ::name (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::string >
name (const ::std::string& u,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::xml_schema::string > r (
    ::name (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::string >
name (const ::std::string& u,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::xml_schema::string > r (
    ::name (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::string >
name (::std::istream& is,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::name (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::string >
name (::std::istream& is,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::name (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
name (::std::istream& is,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::name (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
name (::std::istream& is,
      const ::std::string& sid,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::name (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::string >
name (::std::istream& is,
      const ::std::string& sid,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::name (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
name (::std::istream& is,
      const ::std::string& sid,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::name (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
name (const ::xercesc::DOMInputSource& i,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::xml_schema::string > r (
    ::name (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::string >
name (const ::xercesc::DOMInputSource& i,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::xml_schema::string > r (
    ::name (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::string >
name (const ::xercesc::DOMInputSource& i,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::xml_schema::string > r (
    ::name (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::string >
name (const ::xercesc::DOMDocument& d,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::xml_schema::string > r (
      ::name (
        c.get (), f | ::xml_schema::flags::own_dom, p));

    c.release ();
    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "name" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::string > r (
      ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "name",
    "");
}

::std::auto_ptr< ::xml_schema::string >
name (::xercesc::DOMDocument* d,
      ::xml_schema::flags f,
      const ::xml_schema::properties&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  const ::xercesc::DOMElement& e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d->getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "name" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::string > r (
      ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
        e, f, 0));
    c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "name",
    "");
}

::std::auto_ptr< ::xml_schema::string >
mbid (const ::std::string& u,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::xml_schema::string > r (
    ::mbid (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::string >
mbid (const ::std::string& u,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::xml_schema::string > r (
    ::mbid (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::string >
mbid (const ::std::string& u,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::xml_schema::string > r (
    ::mbid (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::string >
mbid (::std::istream& is,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::mbid (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::string >
mbid (::std::istream& is,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::mbid (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
mbid (::std::istream& is,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::mbid (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
mbid (::std::istream& is,
      const ::std::string& sid,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::mbid (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::string >
mbid (::std::istream& is,
      const ::std::string& sid,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::mbid (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
mbid (::std::istream& is,
      const ::std::string& sid,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::mbid (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
mbid (const ::xercesc::DOMInputSource& i,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::xml_schema::string > r (
    ::mbid (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::string >
mbid (const ::xercesc::DOMInputSource& i,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::xml_schema::string > r (
    ::mbid (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::string >
mbid (const ::xercesc::DOMInputSource& i,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::xml_schema::string > r (
    ::mbid (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::xml_schema::string >
mbid (const ::xercesc::DOMDocument& d,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::xml_schema::string > r (
      ::mbid (
        c.get (), f | ::xml_schema::flags::own_dom, p));

    c.release ();
    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "mbid" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::string > r (
      ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "mbid",
    "");
}

::std::auto_ptr< ::xml_schema::string >
mbid (::xercesc::DOMDocument* d,
      ::xml_schema::flags f,
      const ::xml_schema::properties&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  const ::xercesc::DOMElement& e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d->getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "mbid" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::string > r (
      ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
        e, f, 0));
    c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "mbid",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

